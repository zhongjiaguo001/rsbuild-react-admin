/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as authLoginIndexImport } from './routes/(auth)/login/index'
import { Route as authLoginlayoutImport } from './routes/(auth)/login/__layout'

// Create Virtual Routes

const authLoginImport = createFileRoute('/(auth)/login')()
const appIndexLazyImport = createFileRoute('/(app)/')()
const appChatIndexLazyImport = createFileRoute('/(app)/chat/')()

// Create/Update Routes

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const appIndexLazyRoute = appIndexLazyImport
  .update({
    id: '/(app)/',
    path: '/',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(app)/index.lazy').then((d) => d.Route))

const appChatIndexLazyRoute = appChatIndexLazyImport
  .update({
    id: '/(app)/chat/',
    path: '/chat/',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(app)/chat/index.lazy').then((d) => d.Route))

const authLoginIndexRoute = authLoginIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authLoginRoute,
} as any)

const authLoginlayoutRoute = authLoginlayoutImport.update({
  id: '/__layout',
  getParentRoute: () => authLoginRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login/__layout': {
      id: '/(auth)/login/__layout'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginlayoutImport
      parentRoute: typeof authLoginRoute
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof authLoginIndexImport
      parentRoute: typeof authLoginImport
    }
    '/(app)/chat/': {
      id: '/(app)/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof appChatIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface authLoginRouteChildren {
  authLoginlayoutRoute: typeof authLoginlayoutRoute
  authLoginIndexRoute: typeof authLoginIndexRoute
}

const authLoginRouteChildren: authLoginRouteChildren = {
  authLoginlayoutRoute: authLoginlayoutRoute,
  authLoginIndexRoute: authLoginIndexRoute,
}

const authLoginRouteWithChildren = authLoginRoute._addFileChildren(
  authLoginRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof appIndexLazyRoute
  '/login': typeof authLoginlayoutRoute
  '/login/': typeof authLoginIndexRoute
  '/chat': typeof appChatIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof appIndexLazyRoute
  '/login': typeof authLoginIndexRoute
  '/chat': typeof appChatIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(app)/': typeof appIndexLazyRoute
  '/(auth)/login': typeof authLoginRouteWithChildren
  '/(auth)/login/__layout': typeof authLoginlayoutRoute
  '/(auth)/login/': typeof authLoginIndexRoute
  '/(app)/chat/': typeof appChatIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/login/' | '/chat'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/chat'
  id:
    | '__root__'
    | '/(app)/'
    | '/(auth)/login'
    | '/(auth)/login/__layout'
    | '/(auth)/login/'
    | '/(app)/chat/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  appIndexLazyRoute: typeof appIndexLazyRoute
  authLoginRoute: typeof authLoginRouteWithChildren
  appChatIndexLazyRoute: typeof appChatIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  appIndexLazyRoute: appIndexLazyRoute,
  authLoginRoute: authLoginRouteWithChildren,
  appChatIndexLazyRoute: appChatIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(app)/",
        "/(auth)/login",
        "/(app)/chat/"
      ]
    },
    "/(app)/": {
      "filePath": "(app)/index.lazy.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login",
      "children": [
        "/(auth)/login/__layout",
        "/(auth)/login/"
      ]
    },
    "/(auth)/login/__layout": {
      "filePath": "(auth)/login/__layout.tsx",
      "parent": "/(auth)/login"
    },
    "/(auth)/login/": {
      "filePath": "(auth)/login/index.tsx",
      "parent": "/(auth)/login"
    },
    "/(app)/chat/": {
      "filePath": "(app)/chat/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
